// Generated by CoffeeScript 1.6.3
/*
For full API docs please consult: http://customer.io/docs/api/rest.html
*/


(function() {
  var API_VERSION, CREATE_CUSTOMER_URL, Customerio, HOST, PROTOCOL, TRACK_EVENT_URL, check, hyperquest, querystring, url, util, _responseHandler;

  hyperquest = require('hyperquest');

  check = require('check-types');

  url = require('url');

  util = require('util');

  querystring = require('querystring');

  PROTOCOL = 'https';

  HOST = 'track.customer.io/api';

  API_VERSION = 1;

  CREATE_CUSTOMER_URL = '/v1/customers/%s';

  TRACK_EVENT_URL = '/v1/customers/%s/events';

  Customerio = (function() {
    function Customerio(siteId, secretKey) {
      if (typeof siteId !== 'string') {
        throw new TypeError('Invalid siteId');
      }
      if (typeof secretKey !== 'string') {
        throw new TypeError('Invalid secretKey');
      }
      this.siteId = siteId;
      this.secretKey = secretKey;
      this.protocol = PROTOCOL;
      this.host = HOST;
      this.requestOptions = {
        auth: "" + this.siteId + ":" + this.secretKey
      };
    }

    /*
    Definition
    PUT https://track.customer.io/api/v1/customers/{CUSTOMER_ID}
    
    Example request
    curl -i https://track.customer.io/api/v1/customers/5 \
       -X PUT \
       -u YOUR-SITE-ID-HERE:YOUR-SECRET-API-KEY-HERE \
       -d email=customer@example.com \
       -d name=Bob \
       -d plan=premium
     
    Example request JSON
    curl -i https://track.customer.io/api/v1/customers/5 \
       -X PUT \
       -H "Content-Type: application/json" \
       -u YOUR-SITE-ID-HERE:YOUR-SECRET-API-KEY-HERE \
       -d '{"email":"customer@example.com","name":"Bob","plan":"premium","array":["1","2","3"]}'
    */


    Customerio.prototype.identify = function(userId, email, data, callback) {
      var body, options, req, uri;
      if (typeof callback !== 'function') {
        throw new TypeError('Invalid callback');
      }
      if (typeof userId !== 'string') {
        throw new TypeError('Invalid user id');
      }
      if (typeof email !== 'string') {
        throw new TypeError('Invalid email');
      }
      if (!check.object(data)) {
        throw new TypeError('Invalid data');
      }
      data.email = email;
      body = JSON.stringify(data);
      uri = url.format({
        protocol: this.protocol,
        host: this.host,
        pathname: util.format(CREATE_CUSTOMER_URL, userId)
      });
      options = this.requestOptions;
      options.method = 'PUT';
      options.headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(body)
      };
      req = hyperquest(uri, options, _responseHandler(callback));
      req.end(body);
      return req.on('error', function(err) {
        return callback(err);
      });
    };

    /*
    Definition
    DELETE https://track.customer.io/api/v1/customers/{CUSTOMER_ID}
    
    Example request
    curl -i https://track.customer.io/api/v1/customers/5 \
       -X DELETE \
       -u YOUR-SITE-ID-HERE:YOUR-SECRET-API-KEY-HERE
    */


    Customerio.prototype.deleteCustomer = function(userId, callback) {
      var options, req, uri;
      if (typeof callback !== 'function') {
        throw new TypeError('Invalid callback');
      }
      if (typeof userId !== 'string') {
        throw new TypeError('Invalid user id');
      }
      uri = url.format({
        protocol: this.protocol,
        host: this.host,
        pathname: util.format(CREATE_CUSTOMER_URL, userId)
      });
      options = this.requestOptions;
      options.method = 'DELETE';
      req = hyperquest(uri, options, _responseHandler(callback));
      return req.on('error', function(err) {
        return callback(err);
      });
    };

    /*
    Definition
    POST https://track.customer.io/api/v1/customers/{CUSTOMER_ID}/events
    
    Example request
    curl -i https://track.customer.io/api/v1/customers/5/events \
       -u YOUR-SITE-ID-HERE:YOUR-SECRET-API-KEY-HERE \
       -d name=purchased \
       -d data[price]=23.45
    */


    Customerio.prototype.track = function(userId, eventName, data, callback) {
      var attributes, body, key, options, req, uri, value;
      if (typeof callback !== 'function') {
        throw new TypeError('Invalid callback');
      }
      if (typeof userId !== 'string') {
        throw new TypeError('Invalid user id');
      }
      if (typeof eventName !== 'string') {
        throw new TypeError('Invalid event name');
      }
      if (!check.object(data)) {
        throw new TypeError('Invalid data');
      }
      attributes = {
        name: eventName
      };
      for (key in data) {
        value = data[key];
        attributes["data[" + key + "]"] = value;
      }
      body = querystring.stringify(attributes);
      uri = url.format({
        protocol: this.protocol,
        host: this.host,
        pathname: util.format(TRACK_EVENT_URL, userId)
      });
      options = this.requestOptions;
      options.method = 'POST';
      options.headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': Buffer.byteLength(body)
      };
      req = hyperquest(uri, options, _responseHandler(callback));
      req.end(body);
      return req.on('error', function(err) {
        return callback(err);
      });
    };

    return Customerio;

  })();

  module.exports = Customerio;

  _responseHandler = function(callback) {
    return function(err, res) {
      var data;
      if (err != null) {
        return callback(err);
      }
      data = '';
      res.on('data', function(chunk) {
        return data += chunk;
      });
      return res.on('end', function() {
        if ((res != null ? res.statusCode : void 0) == null) {
          return callback(new Error('there is no response statusCode from the server'));
        }
        if (res.statusCode === 401) {
          console.log('ERROR BODY', data);
          return callback(new Error('Wrong auth credentials'), res);
        }
        if (res.statusCode === 411) {
          console.log('ERROR BODY', data);
          return callback(new Error('required content length'), res);
        }
        if (res.statusCode !== 200) {
          console.log('ERROR BODY', data);
          return callback(new Error('something went wrong'), res);
        }
        return callback(null, res);
      });
    };
  };

}).call(this);
